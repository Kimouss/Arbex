security:
    encoders:
        App\Entity\User\User:
            algorithm: auto

    role_hierarchy:
        ROLE_PUBLIC: ROLE_PUBLIC
        ROLE_USER: ROLE_USER
        ROLE_ADMIN: ROLE_ADMIN
        ROLE_ADMIN_CLIENT: [ ROLE_ADMIN, ROLE_USER, ROLE_PUBLIC ]
        ROLE_ADMIN_ARBEX: [ ROLE_ADMIN, ROLE_USER, ROLE_PUBLIC, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ADMIN_ARBEX, ROLE_ALLOWED_TO_SWITCH ]

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy
            provider: app_user_provider
            form_login:
                login_path: admin_app_login
                check_path: admin_app_login
                csrf_token_generator: security.csrf.token_manager
                default_target_path: list
            guard:
                authenticators:
                    - App\Security\AdminLoginFormAuthenticator
            logout:
                path: admin_app_logout
                target: /arbex_bo/login
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/arbex_bo, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
